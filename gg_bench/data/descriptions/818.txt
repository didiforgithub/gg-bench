# Sequence Splitter

## Objective

The objective of **Sequence Splitter** is to avoid being the player who is forced to take the last remaining number in a sequence. Players take turns partitioning and selecting segments of a numerical sequence. Strategic thinking and foresight are essential to guide the game towards a favorable outcome.

---

## Setup

1. **Initial Sequence**: The game begins with a sequence of consecutive numbers from **1** to **15**, arranged in ascending order:

   ```
   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
   ```

2. **Players**: Two players participate in the game:
   - **Player 1**
   - **Player 2**

3. **Starting Player**: Decide which player will go first. This can be determined by a coin toss or mutual agreement.

---

## Game Components

- **Numerical Sequence**: A list of numbers from **1** to **15**.
- **Command-Line Interface**: The game is played in a command-line environment where players input their moves.
- **No Physical Components**: All game elements are virtual, making it simple to code and play.

---

## Turns

The game is played in a series of turns, with players alternating roles each turn.

### Turn Structure

1. **Partition Phase**:
   - **Current Player's Role**: The player whose turn it is becomes the **Partitioner**.
   - **Action**: The Partitioner divides the current sequence into two non-empty, contiguous segments.
   - **Input**: The Partitioner specifies the position at which to split the sequence.

2. **Selection Phase**:
   - **Opponent's Role**: The other player becomes the **Selector**.
   - **Action**: The Selector chooses one of the two segments to **remove** from the game.
   - **Input**: The Selector indicates which segment to remove (e.g., "Remove Segment 1" or "Remove Segment 2").

3. **Turn Progression**:
   - After the Selection Phase, the remaining segment becomes the new sequence.
   - Roles switch in the next turn: the previous Selector becomes the Partitioner, and vice versa.

---

## Rules and Mechanics

### Partitioning Rules

- **Must Partition**: The Partitioner must split the sequence into **two non-empty, contiguous** segments.
- **No Rearrangement**: The order of numbers must remain the same; rearranging numbers is not allowed.
- **Valid Splits**: Any position that results in two non-empty segments is valid.

  *Example*: Splitting `[1, 2, 3, 4]` at position 2 results in `[1, 2]` and `[3, 4]`.

### Selection Rules

- **Must Select**: The Selector must remove one of the two segments created by the Partitioner.
- **Removal**: The selected segment is permanently removed from the game.
- **Remaining Sequence**: The unselected segment becomes the sequence for the next turn.

### Endgame Condition

- **Last Number**: When only one number remains in the sequence, the game ends.
- **Losing Condition**: The player who is forced to take the last remaining number **loses** the game.
- **Winning Condition**: The opponent of the player who takes the last number **wins** the game.

### Additional Rules

- **No Skipping Turns**: Players must take their turn when it comes.
- **Communication**: Players should clearly communicate their actions during their turn.

---

## Scoring

- **Win/Lose Outcome**: The game results in a win for one player and a loss for the other.
- **No Point System**: There are no points or scores tracked beyond determining the winner.
- **Match Play (Optional)**: Players may choose to play multiple rounds, keeping track of overall wins.

---

## Examples

### Example Game Play

**Initial Sequence**:

```
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
```

**Turn 1**:

- **Player 1 (Partitioner)**:
  - Decides to split the sequence at position **9**.
  - **Segments**:
    - **Segment 1**: `[1, 2, 3, 4, 5, 6, 7, 8, 9]`
    - **Segment 2**: `[10, 11, 12, 13, 14, 15]`

- **Player 2 (Selector)**:
  - Chooses to **remove Segment 2**.
  - **Remaining Sequence**:
    ```
    [1, 2, 3, 4, 5, 6, 7, 8, 9]
    ```

**Turn 2**:

- **Player 2 (Partitioner)**:
  - Splits the sequence at position **5**.
  - **Segments**:
    - **Segment 1**: `[1, 2, 3, 4, 5]`
    - **Segment 2**: `[6, 7, 8, 9]`

- **Player 1 (Selector)**:
  - Chooses to **remove Segment 2**.
  - **Remaining Sequence**:
    ```
    [1, 2, 3, 4, 5]
    ```

**Turn 3**:

- **Player 1 (Partitioner)**:
  - Splits the sequence at position **2**.
  - **Segments**:
    - **Segment 1**: `[1, 2]`
    - **Segment 2**: `[3, 4, 5]`

- **Player 2 (Selector)**:
  - Chooses to **remove Segment 1**.
  - **Remaining Sequence**:
    ```
    [3, 4, 5]
    ```

**Turn 4**:

- **Player 2 (Partitioner)**:
  - Splits the sequence at position **1**.
  - **Segments**:
    - **Segment 1**: `[3]`
    - **Segment 2**: `[4, 5]`

- **Player 1 (Selector)**:
  - Chooses to **remove Segment 2**.
  - **Remaining Sequence**:
    ```
    [3]
    ```

- **End of Game**:
  - **Player 2** is forced to take the last number **3** and **loses** the game.
  - **Player 1** is declared the **winner**.

### Command-Line Interaction Sample

**Game Start**:

```
Initial Sequence: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
```

**Turn 1**:

- **Player 1**:
  ```
  Enter the position to split the sequence (between 1 and 14): 9
  ```
  - Sequence is split into:
    - Segment 1: `[1, 2, 3, 4, 5, 6, 7, 8, 9]`
    - Segment 2: `[10, 11, 12, 13, 14, 15]`

- **Player 2**:
  ```
  Choose a segment to remove (1 or 2): 2
  ```
  - Segment 2 is removed.

- **Remaining Sequence**:
  ```
  [1, 2, 3, 4, 5, 6, 7, 8, 9]
  ```

**Turn 2**:

- **Player 2**:
  ```
  Enter the position to split the sequence (between 1 and 8): 5
  ```
  - Sequence is split into:
    - Segment 1: `[1, 2, 3, 4, 5]`
    - Segment 2: `[6, 7, 8, 9]`

- **Player 1**:
  ```
  Choose a segment to remove (1 or 2): 2
  ```
  - Segment 2 is removed.

- **Remaining Sequence**:
  ```
  [1, 2, 3, 4, 5]
  ```

**Turn 3**:

- **Player 1**:
  ```
  Enter the position to split the sequence (between 1 and 4): 2
  ```
  - Sequence is split into:
    - Segment 1: `[1, 2]`
    - Segment 2: `[3, 4, 5]`

- **Player 2**:
  ```
  Choose a segment to remove (1 or 2): 1
  ```
  - Segment 1 is removed.

- **Remaining Sequence**:
  ```
  [3, 4, 5]
  ```

**Turn 4**:

- **Player 2**:
  ```
  Enter the position to split the sequence (between 1 and 2): 1
  ```
  - Sequence is split into:
    - Segment 1: `[3]`
    - Segment 2: `[4, 5]`

- **Player 1**:
  ```
  Choose a segment to remove (1 or 2): 2
  ```
  - Segment 2 is removed.

- **Remaining Sequence**:
  ```
  [3]
  ```

**Game Over**:

- **Player 2** is forced to take the last number **3**.
- **Player 1 wins the game!**

---

## Strategy Tips

- **Plan Ahead**: Think several moves ahead to anticipate your opponent's options.
- **Control the Game**: Try to force the sequence into configurations where you have the advantage.
- **Balance the Segments**: Be cautious when partitioning; creating segments of unequal lengths can give your opponent an advantage.

---

## Conclusion

**Sequence Splitter** is a simple yet strategically deep game that challenges players to think ahead and make smart decisions. Its straightforward rules and command-line compatibility make it easy to code and quick to play, ensuring an engaging experience where skill prevails over luck.

Enjoy the game, and may the best strategist win!