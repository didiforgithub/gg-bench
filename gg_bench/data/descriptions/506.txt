# Switch and Swap: A Two-Player Command-Line Game

## Objective

**Switch and Swap** is a strategic two-player, turn-based game where the goal is to be the first player to arrange a shared array of unique numbers into ascending order. Players take turns performing specific operations on the array, with the aim of sorting it before their opponent does. The player who successfully transforms the array into ascending order on their turn wins the game.

## Setup

1. **Initialize the Array**: The game starts with a shared array of `N` unique integers in random order. The size of the array, `N`, should be a small integer (e.g., 4 or 5) to ensure quick gameplay. An example starting array might be `[3, 1, 4, 2]`.

2. **Determine Turn Order**: Players decide who will take the first turn. This can be done randomly or by mutual agreement.

3. **Display the Initial State**: The initial array is displayed to both players in the command-line interface.

## Game Components

- **Array of Numbers**: The central component is a one-dimensional array containing `N` unique integers. This array is shared between the two players and is modified throughout the game.

- **Operations**: Players interact with the array using two types of moves:
  - **Swap**: Exchange the positions of any two adjacent elements in the array.
  - **Rotate**: Rotate three consecutive elements either to the left or right, effectively shifting their positions.

## Turns

### Structure of a Turn

1. **Display the Current Array**: At the beginning of a player's turn, the current state of the array is displayed.

2. **Choose an Operation**: The player selects one of the two available operations:
   - **Swap Adjacent Elements**
   - **Rotate Three Consecutive Elements**

3. **Specify Positions**:
   - For a **Swap**, the player specifies the index of the first of the two adjacent elements they wish to swap.
   - For a **Rotate**, the player specifies the starting index of the three consecutive elements and the direction of rotation (left or right).

4. **Perform the Operation**: The selected operation is applied to the array.

5. **Check for Win Condition**: The game checks if the array is now in ascending order.
   - **If Yes**: The current player wins the game.
   - **If No**: The turn passes to the next player.

6. **Prohibit Undoing Previous Move**: Players are not allowed to directly reverse the opponent's previous move on their turn.

### Progression of Turns

- Players alternate turns until one player wins by arranging the array in ascending order.
- The game ensures that a winner will be determined within a finite number of turns, preventing infinite loops or draws.

## Rules and Mechanics

### Swap Operation

- **Description**: Swap the positions of two adjacent elements in the array.
- **How to Perform**:
  - Specify the index `i` of the first element to swap.
  - The elements at positions `i` and `i+1` are exchanged.
- **Constraints**:
  - `i` must be between 1 and `N-1`.
  - Swapping must involve adjacent elements only.

### Rotate Operation

- **Description**: Rotate three consecutive elements to the left or right.
- **How to Perform**:
  - Specify the starting index `i` of the three elements to rotate.
  - Choose the direction of rotation: left or right.
- **Effects**:
  - **Left Rotation**: The element at index `i` moves to index `i+1`, the element at `i+1` moves to `i+2`, and the element at `i+2` moves to `i`.
  - **Right Rotation**: The element at index `i+2` moves to index `i+1`, the element at `i+1` moves to `i`, and the element at `i` moves to `i+2`.
- **Constraints**:
  - `i` must be between 1 and `N-2`.
  - Rotation must involve exactly three consecutive elements.

### Prohibited Moves

- Players cannot perform an operation that directly undoes their opponent's previous move. This ensures progress towards the game's completion and adds strategic depth.

### Winning the Game

- The game is won by the player who, at the end of their turn, has successfully arranged the array in strictly ascending order (e.g., `[1, 2, 3, 4]`).
- There are no draws in **Switch and Swap**; gameplay continues until one player achieves the winning condition.

## Scoring

- **Victory**: The player who arranges the array in ascending order wins the game.
- **No Point System**: There is no point tracking or scoring beyond winning the game.
- **Match Play**: Players may agree to play multiple rounds, keeping track of wins to determine an overall champion.

## Examples

### Sample Game Play

**Initial Array**: `[3, 1, 4, 2]`

#### Turn 1: Player 1

- **Current Array**: `[3, 1, 4, 2]`
- **Operation**: Swap elements at index 2.
- **Action**: Swap elements `1` and `4`.
- **New Array**: `[3, 4, 1, 2]`
- **Check for Win**: Array is not in ascending order.
  
#### Turn 2: Player 2

- **Current Array**: `[3, 4, 1, 2]`
- **Operation**: Rotate elements starting at index 2 to the left.
- **Action**: Rotate elements `4, 1, 2` to the left.
- **New Array**: `[3, 1, 2, 4]`
- **Check for Win**: Array is not in ascending order.

#### Turn 3: Player 1

- **Current Array**: `[3, 1, 2, 4]`
- **Operation**: Swap elements at index 1.
- **Action**: Swap elements `3` and `1`.
- **New Array**: `[1, 3, 2, 4]`
- **Check for Win**: Array is not in ascending order.

#### Turn 4: Player 2

- **Current Array**: `[1, 3, 2, 4]`
- **Operation**: Swap elements at index 2.
- **Action**: Swap elements `3` and `2`.
- **New Array**: `[1, 2, 3, 4]`
- **Check for Win**: Array is in ascending order.

**Result**: Player 2 wins the game.

### Command-Line Interaction

Below is a sample command-line interaction for the first two turns.

**Game Start**

```
Initial array: [3, 1, 4, 2]

Player 1's turn.
Current array: [3, 1, 4, 2]
Choose operation:
1. Swap adjacent elements
2. Rotate three consecutive elements
Enter your choice (1 or 2): 1
Enter the index of the first element to swap (1-3): 2
Array after your move: [3, 4, 1, 2]

Player 2's turn.
Current array: [3, 4, 1, 2]
Choose operation:
1. Swap adjacent elements
2. Rotate three consecutive elements
Enter your choice (1 or 2): 2
Enter the starting index for rotation (1-2): 2
Rotate left or right? (L/R): L
Array after your move: [3, 1, 2, 4]

(And so on...)
```

## Strategies for Winning

- **Plan Ahead**: Anticipate the results of your moves beyond the immediate effect. Consider how your move will set up your next turn or affect your opponent's options.

- **Prevent Undoing**: Since players cannot undo the previous move, use this to your advantage by making moves that limit your opponent's beneficial options.

- **Control Key Positions**: Focus on manipulating the elements that are out of place and bring them closer to their correct positions.

- **Force a Win**: Set up the array so that no matter what move your opponent makes, you can win on your next turn.

## Additional Rules

- **Valid Inputs**: The game should validate all player inputs to ensure they are within the allowed ranges and that operations are permissible.

- **Illegal Moves**: Attempting an illegal move results in losing the turn. The array remains unchanged, and play passes to the opponent.

- **Game Replay**: After a game concludes, players may choose to play again, possibly with a new random array or increased array size for added challenge.

## Conclusion

**Switch and Swap** is a simple yet strategic game that tests players' problem-solving and planning abilities. Its straightforward rules make it easy to learn and code, while the strategic depth ensures skilled players have an advantage. With no possibility of a draw and quick gameplay, it's an engaging choice for a command-line two-player game.

Enjoy the challenge and have fun playing **Switch and Swap**!