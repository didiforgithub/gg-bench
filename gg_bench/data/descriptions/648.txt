# Even/Odd Match: Game Rule Book

## Objective

The objective of **Even/Odd Match** is to be the last player able to remove a number from the shared list under the game's alternating even and odd number removal rules. Players must strategically choose numbers to limit their opponent's options and force them into a position where they cannot make a valid move.

## Setup

1. **Number List Initialization**: Create a list of consecutive integers from **1 to 20**.
2. **Player Roles**: Two players are designated as **Player 1** and **Player 2**. You can decide who goes first by any mutual agreement or random selection.

## Game Components

- **Number List**: A shared list of integers from **1 to 20**. This list represents the pool of numbers from which players will remove numbers during the game.
- **Player Indicators**: Each player is identified as **Player 1** or **Player 2** for turn-taking purposes.

## Turns

- **Turn Order**: The game starts with **Player 1**, and players alternate turns thereafter.
- **Turn Actions**: On their turn, a player must remove a number from the list according to the game's rules.

## Rules and Mechanics

1. **Starting the Game**:
   - **Player 1** begins by removing **any number** from the list (either even or odd).

2. **Even/Odd Alternation Rule**:
   - If the last number removed was **odd**:
     - The next player **must remove an even number** from the remaining list.
   - If the last number removed was **even**:
     - The next player **must remove an odd number** from the remaining list.

3. **Valid Moves**:
   - A move is valid if the player removes a number of the required parity (even or odd) as dictated by the Even/Odd Alternation Rule.
   - If no valid numbers of the required parity remain, the player loses the game.

4. **Removing Numbers**:
   - When a player removes a number, it is **deleted** from the list and cannot be chosen again.
   - Players must **announce** the number they are removing on their turn.

5. **Winning the Game**:
   - A player **wins** if their opponent cannot make a valid move on their turn due to the absence of required even or odd numbers in the list.
   - There is **no draw mechanism**; the game continues until one player wins.

## Scoring

- **Victory Condition**: The first player who forces their opponent into a position where they cannot make a valid move wins the game.
- **No Points System**: There is no point tracking or scoring beyond determining the winner of the game.

## Examples

### Example Game Play

**Initial Number List**:
```
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
 11,12,13,14,15,16,17,18,19,20]
```

**Turn 1**:
- **Player 1** removes **7** (odd).
- **Updated List**:
```
[1, 2, 3, 4, 5, 6, 8, 9,10,
 11,12,13,14,15,16,17,18,19,20]
```

**Turn 2**:
- Since the last number removed was **odd**, **Player 2** must remove an **even** number.
- **Player 2** removes **16** (even).
- **Updated List**:
```
[1, 2, 3, 4, 5, 6, 8, 9,10,
 11,12,13,14,15,17,18,19,20]
```

**Turn 3**:
- The last number removed was **even**, so **Player 1** must remove an **odd** number.
- **Player 1** removes **5** (odd).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8, 9,10,
 11,12,13,14,15,17,18,19,20]
```

**Turn 4**:
- The last number removed was **odd**, so **Player 2** must remove an **even** number.
- **Player 2** removes **18** (even).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8, 9,10,
 11,12,13,14,15,17,19,20]
```

**Turn 5**:
- The last number removed was **even**, so **Player 1** must remove an **odd** number.
- **Player 1** removes **15** (odd).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8, 9,10,
 11,12,13,14,17,19,20]
```

**Turn 6**:
- The last number removed was **odd**, so **Player 2** must remove an **even** number.
- **Player 2** removes **20** (even).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8, 9,10,
 11,12,13,14,17,19]
```

**Turn 7**:
- The last number removed was **even**, so **Player 1** must remove an **odd** number.
- **Player 1** removes **17** (odd).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8, 9,10,
 11,12,13,14,19]
```

**Turn 8**:
- The last number removed was **odd**, so **Player 2** must remove an **even** number.
- The even numbers remaining are **2, 4, 6, 8, 10, 12, 14**.

- **Player 2** removes **14** (even).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8, 9,10,
 11,12,13,19]
```

**Turn 9**:
- The last number removed was **even**, so **Player 1** must remove an **odd** number.
- The odd numbers remaining are **1, 3, 9, 11, 13, 19**.

- **Player 1** removes **13** (odd).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8, 9,10,
 11,12,19]
```

**Turn 10**:
- The last number removed was **odd**, so **Player 2** must remove an **even** number.
- The even numbers remaining are **2, 4, 6, 8, 10, 12**.

- **Player 2** removes **12** (even).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8, 9,10,
 11,19]
```

**Turn 11**:
- The last number removed was **even**, so **Player 1** must remove an **odd** number.
- The odd numbers remaining are **1, 3, 9, 11, 19**.

- **Player 1** removes **19** (odd).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8, 9,10,11]
```

**Turn 12**:
- The last number removed was **odd**, so **Player 2** must remove an **even** number.
- The even numbers remaining are **2, 4, 6, 8, 10**.

- **Player 2** removes **10** (even).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8,9,11]
```

**Turn 13**:
- The last number removed was **even**, so **Player 1** must remove an **odd** number.
- The odd numbers remaining are **1, 3, 9, 11**.

- **Player 1** removes **11** (odd).
- **Updated List**:
```
[1, 2, 3, 4, 6, 8,9]
```

**Turn 14**:
- The last number removed was **odd**, so **Player 2** must remove an **even** number.
- The even numbers remaining are **2, 4, 6, 8**.

- **Player 2** removes **8** (even).
- **Updated List**:
```
[1, 2, 3, 4,6,9]
```

**Turn 15**:
- The last number removed was **even**, so **Player 1** must remove an **odd** number.
- The odd numbers remaining are **1, 3, 9**.

- **Player 1** removes **9** (odd).
- **Updated List**:
```
[1, 2, 3, 4,6]
```

**Turn 16**:
- The last number removed was **odd**, so **Player 2** must remove an **even** number.
- The even numbers remaining are **2, 4, 6**.

- **Player 2** removes **6** (even).
- **Updated List**:
```
[1, 2, 3,4]
```

**Turn 17**:
- The last number removed was **even**, so **Player 1** must remove an **odd** number.
- The odd numbers remaining are **1, 3**.

- **Player 1** removes **3** (odd).
- **Updated List**:
```
[1, 2,4]
```

**Turn 18**:
- The last number removed was **odd**, so **Player 2** must remove an **even** number.
- The even numbers remaining are **2, 4**.

- **Player 2** removes **4** (even).
- **Updated List**:
```
[1,2]
```

**Turn 19**:
- The last number removed was **even**, so **Player 1** must remove an **odd** number.
- The only odd number remaining is **1**.

- **Player 1** removes **1** (odd).
- **Updated List**:
```
[2]
```

**Turn 20**:
- The last number removed was **odd**, so **Player 2** must remove an **even** number.
- The only even number remaining is **2**.

- **Player 2** removes **2** (even).
- **Updated List**:
```
[]
```

**Result**:
- All numbers have been removed.
- Since **Player 1** has no valid moves but **Player 2** successfully removed the last number, **Player 2** wins the game.

### Command-Line Interaction Example

Assuming a command-line interface where players input their chosen numbers:

```plaintext
Initial Numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,12,13,14,15,16,17,18,19,20]

Player 1's turn. Remove any number:
Player 1 inputs: 7
Numbers Remaining: [1, 2, 3, 4, 5, 6, 8, 9,10,11,12,13,14,15,16,17,18,19,20]

Player 2 must remove an EVEN number.
Numbers Remaining: [2, 4, 6, 8,10,12,14,16,18,20]
Player 2 inputs: 16
Numbers Remaining: [1, 2, 3, 4, 5, 6, 8, 9,10,11,12,13,14,15,17,18,19,20]

Player 1 must remove an ODD number.
Numbers Remaining: [1,3,5,9,11,13,15,17,19]
Player 1 inputs: 5
Numbers Remaining: [1, 2, 3, 4, 6, 8, 9,10,11,12,13,14,15,17,18,19,20]

... [Gameplay continues as illustrated above] ...

Player 2 removes 2
Numbers Remaining: []

Player 1 has no valid moves remaining.
Player 2 wins the game!
```

## Strategy Tips

- **Plan Ahead**: Keep track of the remaining even and odd numbers to anticipate future moves.
- **Control the Parity**: By removing certain numbers, you can control whether your opponent must pick even or odd on their next turn.
- **Limit Opponent's Options**: Try to force your opponent into a situation where they have no valid moves.

## Conclusion

**Even/Odd Match** is a simple yet strategic game that challenges players to think ahead and outmaneuver their opponent. With straightforward rules and easy implementation in a command-line interface, it's an excellent choice for both casual play and developing strategic thinking skills.