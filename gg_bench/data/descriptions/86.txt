# **Grid Conquest**

## **Objective**

Become the first player to create an unbroken line of your tokens connecting two opposite sides of a 5x5 grid. Player 1 aims to connect the top and bottom edges, while Player 2 aims to connect the left and right edges. The line can be horizontal, vertical, or diagonal, but must be continuous without gaps.

## **Setup**

1. **Grid Creation**: Draw a 5x5 grid consisting of 25 cells. Each cell is initially empty.
2. **Player Assignment**:
   - **Player 1**: Uses the symbol **'X'** and aims to connect the **top** and **bottom** edges.
   - **Player 2**: Uses the symbol **'O'** and aims to connect the **left** and **right** edges.
3. **Starting Conditions**: The grid is empty at the start of the game. Players decide who goes first (e.g., by coin toss).

## **Game Components**

- **Grid**: A 5x5 grid represented in the command-line interface as a two-dimensional array or list.
- **Tokens**:
  - **Player 1**: 'X'
  - **Player 2**: 'O'
- **Symbols**: Used to mark the cells on the grid. Empty cells can be represented by '.' or spaces.

## **Turns**

1. **Turn Order**: Players alternate turns, starting with the player who was chosen to go first.
2. **Player Action**:
   - On their turn, a player places their token ('X' or 'O') on any empty cell of the grid.
3. **Valid Moves**:
   - A move is valid if the chosen cell is empty.
4. **Turn Progression**:
   - After placing a token, the turn passes to the other player.

## **Rules and Mechanics**

1. **Placement Rules**:
   - Players can place their token on any empty cell without restrictions.
2. **Connection Goals**:
   - **Player 1 ('X')**: Must create a continuous path of their tokens connecting the top edge to the bottom edge of the grid.
   - **Player 2 ('O')**: Must create a continuous path of their tokens connecting the left edge to the right edge of the grid.
3. **Path Criteria**:
   - Paths can be formed horizontally, vertically, or diagonally.
   - The path must be unbroken; all tokens in the path must be connected to each other.
4. **Winning the Game**:
   - The first player to complete their connection goal wins immediately.
5. **No Draws**:
   - Due to the grid size and the nature of the connection goals, the game cannot end in a draw.
6. **Blocking**:
   - Players can block their opponent's progress by occupying critical cells.

## **Scoring**

No traditional scoring system is used. Victory is achieved by completing the connection goal.

## **Examples**

### **Sample Turn Progression**

#### **Initial Grid**

```
. . . . .
. . . . .
. . . . .
. . . . .
. . . . .
```

#### **Turn 1: Player 1 ('X')**

- **Action**: Places 'X' at cell (1,3)

```
. . X . .
. . . . .
. . . . .
. . . . .
. . . . .
```

#### **Turn 2: Player 2 ('O')**

- **Action**: Places 'O' at cell (3,1)

```
. . X . .
. . . . .
O . . . .
. . . . .
. . . . .
```

#### **Turn 3: Player 1 ('X')**

- **Action**: Places 'X' at cell (2,3)

```
. . X . .
. . X . .
O . . . .
. . . . .
. . . . .
```

#### **Turn 4: Player 2 ('O')**

- **Action**: Places 'O' at cell (3,2)

```
. . X . .
. . X . .
O O . . .
. . . . .
. . . . .
```

#### **Turn 5: Player 1 ('X')**

- **Action**: Places 'X' at cell (3,3)

```
. . X . .
. . X . .
O O X . .
. . . . .
. . . . .
```

#### **Turn 6: Player 2 ('O')**

- **Action**: Places 'O' at cell (3,4)

```
. . X . .
. . X . .
O O X O .
. . . . .
. . . . .
```

#### **Turn 7: Player 1 ('X')**

- **Action**: Places 'X' at cell (4,3)

```
. . X . .
. . X . .
O O X O .
. . X . .
. . . . .
```

#### **Turn 8: Player 2 ('O')**

- **Action**: Places 'O' at cell (4,2)

```
. . X . .
. . X . .
O O X O .
. O X . .
. . . . .
```

#### **Turn 9: Player 1 ('X')**

- **Action**: Places 'X' at cell (5,3)

```
. . X . .
. . X . .
O O X O .
. O X . .
. . X . .
```

- **Result**: Player 1 has connected the top edge to the bottom edge with a continuous path of 'X' tokens at cells (1,3), (2,3), (3,3), (4,3), (5,3).

### **Command-Line Interaction Example**

Assuming zero-based indexing for grid positions.

#### **Game Start**

```
Welcome to Grid Conquest!

Empty Grid:
. . . . . 
. . . . . 
. . . . . 
. . . . . 
. . . . . 

Player 1 ('X'), it's your turn.
Enter your move (row and column): 0 2
```

#### **After Each Move**

```
Updated Grid:
. . X . . 
. . . . . 
. . . . . 
. . . . . 
. . . . . 

Player 2 ('O'), it's your turn.
Enter your move (row and column): 2 0
```

*(The interaction continues as per the sample turn progression.)*

#### **Victory Announcement**

```
Updated Grid:
. . X . . 
. . X . . 
O O X O . 
. O X . . 
. . X . . 

Player 1 ('X') has connected the top and bottom edges!
Congratulations, Player 1 wins!
```

## **Strategic Depth**

- **Planning**: Players must plan their moves to build their path while blocking their opponent.
- **Adaptation**: React to the opponent's moves by altering strategy to maintain progress towards the goal.
- **Blocking**: Deciding when to block the opponent versus when to advance your own path.

## **Implementation Details**

- **Grid Representation**: Use a two-dimensional array or list to represent the grid.
- **Input Handling**: Accept player input for row and column indexes.
- **Win Condition Check**:
  - After each move, check for a continuous path using a pathfinding algorithm like Depth-First Search (DFS) or Breadth-First Search (BFS).
  - Since the grid is small (5x5), this can be implemented efficiently.
- **Invalid Moves**: Ensure that the selected cell is within the grid bounds and is empty.
- **User Interface**: Clear text-based representation of the grid after each move.

## **Conclusion**

**Grid Conquest** is a simple yet strategic game that is easy to code and play in a command-line interface. With no possibility of a draw and a clear win condition, games are quick, and skilled players can develop strategies to consistently win. The game is unique, combining path creation and territorial control on a small grid, ensuring both players are constantly engaged in both offensive and defensive play.