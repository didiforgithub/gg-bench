────────────────────────────────────────────
PHASE SHIFT – A single-player command-line puzzle-exploration game
────────────────────────────────────────────

1. OBJECTIVE
Activate every Beacon that exists in the map and then stand on the Exit tile.  
Victory = All Beacons ON  AND  the player is on the Exit tile.  
Failure  = (a) exceeding the move limit for the chosen difficulty,  
     (b) stepping into a Rift tile, or  
     (c) using the QUIT command.

The game takes place in two parallel “phases” (Alpha and Beta).  
The player can freely switch between phases; walls, floors, and objects may differ in each phase.  
Efficient phase switching and route-planning are the keys to solving the puzzle in the fewest moves.

2. SET-UP

Board size  
 Easy   :  5 × 5   max 50 moves  
 Medium :  7 × 7   max 75 moves  
 Hard  :  9 × 9   max 90 moves  

For every difficulty the designer (or level file) supplies two ASCII layers of equal size:

 • Alpha layer text file   (levelname_A.txt)  
 • Beta  layer text file   (levelname_B.txt)  

The engine loads both layers, validates that every coordinate has at least one traversable tile in **some** phase, and places:

 • 1 Player starting point  (must exist in both phases)  
 • 1 Exit tile              (may differ per phase)  
 • ≥1 Beacon(s)             (may differ per phase)  
 • optional Keys + Gates, Rifts, and optional décor

When the program starts it shows the Alpha layer with the player marker ‘P’.  
The move counter starts at 0.

3. GAME COMPONENTS (print-symbols are identical in both phases unless noted)

.  Floor        – walkable  
#  Wall         – impassable  
B  Beacon       – walkable; becomes ‘b’ once activated (persists across phases)  
E  Exit         – walkable  
k  Key          – walkable; auto-collected, disappears in both phases  
G  Gate         – impassable unless the matching key has been collected  
X  Rift         – lethal; entering kills the player (instant loss)  
P  Player       – current location (overlays whatever tile is underneath)

Void           – a coordinate that is blank in the current phase; attempting to
                 move onto it or phase into it is illegal and wastes a move.

4. ACTIONS (input = one line, case-insensitive)

n  /  up       – move north (row –1)  
s  /  down     – move south (row +1)  
w  /  left     – move west  (col –1)  
e  /  right    – move east  (col +1)  
f              – Phase-Shift (stay on the same coordinate, toggle Alpha⇄Beta)  
r              – redraw current phase (convenience)  
h              – help (prints command list)  
q              – quit (immediate failure)  

Every valid command increments the move counter by 1, except **h** and **r** (free).

5. RULES & MECHANICS

Movement rules  
 • May only move onto Floor, Beacon, Key, Exit, or an already-opened Gate.  
 • Moving onto a Beacon flips it ON (‘b’).  
 • Moving onto a Key removes the key and unlocks every Gate with the same id
   (single-key variant → one k opens all G).  
 • Moving onto a Rift ‘X’ ends the game in failure.  
 • Attempting an illegal move (into wall, closed gate, void) does nothing but
   STILL counts as a move (time pressure).

Phase shift rules  
 • The coordinate must be non-void in the target phase or the shift is illegal
   (counts as a wasted move).  
 • After a successful shift the board redraws in the new phase.  
 • Beacon activation, key possession, gate states, and move counter are GLOBAL,
   shared between phases.

Environmental constraints  
 • Walls and Gates may exist in one phase but not the other.  
 • Rift tiles are always lethal, even if they exist in only one phase.  
 • Beacons are independent objects; a beacon that exists in both phases is a
   single shared beacon (activating it in either phase marks it ON).

6. SCORING

Primary Metric    : Total moves used (lower is better).  
Secondary Metrics :  
 • Difficulty level multiplier (Hard ×1.5, Medium ×1.2, Easy ×1).  
 • Optional time-to-solve (real seconds) if the implementation wishes.  

Suggested star rating  
 3 ★ = win ≤ 60 % of move limit  
 2 ★ = win ≤ 85 % of move limit  
 1 ★ = win within move limit  
 0 ★ = loss

7. WIN / LOSE SUMMARY

Win – all Beacons are ON **and** player stands on Exit before the move limit.  
Lose – any of:  
 • move counter exceeds limit,  
 • player steps on Rift,  
 • player quits.

8. EXAMPLE WALK-THROUGH (Medium level)

Alpha (phase A, starting view)           Beta (phase B, hidden for now)
row/col  0 1 2 3 4 5 6                   row/col  0 1 2 3 4 5 6
0        # # # # # # #                   0        # # # # # # #
1        # P . . B # #                   1        #   # . B # #
2        # # # . # # #                   2        # # # . # # #
3        # k . . . E #                   3        # # . # . E #
4        # # # # # # #                   4        # # # # # # #

Move Limit = 75  Moves = 0

Sample session (user input after ‘>’):

> e
(legal; player to (1,2)) Moves = 1

> s
(illegal – wall)         Moves = 2

> f
(phase shift to Beta succeeds) Moves = 3
Beta view now shows a free path south.

> s
(player to (2,2) in Beta)      Moves = 4
 Tile is ‘.’ → nothing special.

> s
(player to (3,2) in Beta)      Moves = 5
 Tile is ‘.’.

> e
(player to (3,3) Beta; that cell is ‘#’, illegal) Moves = 6

> f
(shift back to Alpha; (3,2) is ‘.’) Moves = 7

> e
(player (3,3) Alpha is ‘.’)     Moves = 8

> e
(player (3,4) Alpha is ‘E’, exit tile)  
All beacons? No (Beacon at (1,4) still OFF)    Moves = 9

> f
(shift to Beta)                Moves = 10
 Exit in Beta is also at (3,4) – convenient.

> n
(player (2,4) Beta wall)       Moves = 11

> n
(player (1,4) Beta is ‘B’)    Moves = 12
 Beacon activated (now ‘b’ in both phases).

> s
(player (2,4) Beta wall)       Moves = 13

> f
(shift → Alpha; (2,4) is ‘#’, illegal) Moves = 14

> w
(player (1,3) Beta ‘.’)        Moves = 15

> s
(player (2,3) Beta ‘.’)        Moves = 16

> s
(player (3,3) Beta ‘#’, illegal) Moves = 17

> e
(player (3,4) Beta ‘E’)        Moves = 18
All Beacons ON and on Exit → Victory!  18 moves, 3-star score.

(Printed summary)
  Solved in 18 moves (24 % of limit) → 3 ★  
  Thanks for playing PHASE SHIFT!

────────────────────────────────────────────
Developer-note: Minimal implementation tips
 • Store two 2-D char arrays: boardA, boardB.  
 • Track (row, col, phase, moveCount, beaconSet, hasKeyBool).  
 • Single input loop reading one character; update game state; redraw layer.  
 • For readability mark active beacon in green (ANSI) or lower-case ‘b’.  
 • Ship 3 level files (easyA/B, mediumA/B, hardA/B) for quick testing.
────────────────────────────────────────────